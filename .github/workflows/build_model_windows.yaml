# GH actions.
# We use it to cover windows builds
# Jenkins is still the primary CI
name: build marian for windows

on:
  workflow_dispatch:
    inputs:
      quantization:
        description: "Choose quantization for model"
        required: true
        default: "q0f32"
        type: choice
        options:
          - q0f32
          - q4f32_1
      language_pair:
        description: "language pair"
        required: true
        default: "en-it"
        type: string

jobs:
  Build-Marian-Windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: 'cmd /C call {0}'

    steps:
    - name: Git config
      run: >-
        git config --system core.longpaths true
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Install LLVM
      run: >-
        cmd /C call ci\models_build\install_llvm.bat
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: mlc-llm-build
        channel-priority: strict
        environment-file: ci/build-environment.yaml
        auto-activate-base: false
    - name: Conda info
      run: |
        conda info
        conda list
        #conda install zlib 
        python --version

    - name: install ssl
      run: |
        # Ensure MinGW64's OpenSSL is in the PATH
        set "PATH=C:\Miniconda\envs\mlc-llm-build\Library\mingw64\bin;%PATH%"
        dir C:\Miniconda\envs\mlc-llm-build\Library\mingw64\bin
        where libcrypto-1-x64.dll
        where libssl-1-x64.dll
        python -v -c "import ssl; print(ssl.__file__)"
    - name: check ssl
      run: |
        # Verify OpenSSL installation from MinGW
        where libcrypto-1-x64.dll
        where libssl-1-x64.dll
        python -v -c "import ssl; print(ssl.__file__)"

    - name: Install Visual Studio Build Tools 2022
      run: |
          choco install visualstudio2022buildtools --version=17.11.9
          refreshenv
          python -v -c "import ssl; print(ssl.__file__)"
    - name: build tvm
      run: |
        set "PATH=%PATH%;D:\a\msys64\mingw64\bin;D:\a\msys64\mingw64\include;D:\a\msys64\mingw64"
        set ZLIB_LIBRARY=D:\a\msys64\mingw64\bin\zlib1.dll
        python -v -c "import ssl; print(ssl.__file__)"
        cd ..
        git clone -b mlc --recursive https://github.com/mlc-ai/relax.git tvm
        cd tvm
        git reset --hard 176d01e61276b0e94910fd904363ef4cd91fb8b5
        mkdir build
        cd build
        cp ../cmake/config.cmake .
        echo set(CMAKE_BUILD_TYPE Debug) >> config.cmake
        echo set(USE_LLVM "llvm-config --ignore-libllvm") >> config.cmake
        echo set(HIDE_PRIVATE_SYMBOLS ON) >> config.cmake
        echo set(USE_VULKAN ON) >> config.cmake
        cmake -G "Visual Studio 17 2022" -A x64 ..
        cmake --build . --target tvm_runtime
        cd ..
        cd python
        set "PATH=%PATH%;D:\a\mlc-llm\tvm\build\Debug"
        pip install -e .
        python -c "import tvm; print(tvm.__file__)"
        python -v -c "import ssl; print(ssl.__file__)"
    - name: Build MLC-LLM
      run: |
        mkdir build
        cd build 
        cp ../cmake/config.cmake .
        echo set(USE_VULKAN ON) >>config.cmake
        echo set(TVM_SOURCE_DIR, $GITHUB_WORKSPACE/../tvm) >> config.cmake
        type config.cmake
        cmake ..
        cmake --build . --parallel 3 
        python -v -c "import ssl; print(ssl.__file__)"

    - name: install mlc-llm
      run: |
        set "PATH=%PATH%;D:\a\mlc-llm\mlc-llm\build\tokenizers\sentencepiece\src\Debug;D:\a\mlc-llm\mlc-llm\build\tokenizers\Debug;D:\a\mlc-llm\mlc-llm\build\Debug"
        cd python
        pip install -e .
        python -v -c "import ssl; print(ssl.__file__)"
    - name: download the model
      run: |
        git clone https://huggingface.co/Helsinki-NLP/opus-mt-en-it

    - name: Compile model
      run: |
        set "PATH=C:\Miniconda\envs\mlc-llm-build\Library\mingw64\bin;%PATH%;D:\a\mlc-llm\tvm\build\Debug;D:\a\mlc-llm\mlc-llm\build\tokenizers\sentencepiece\src\Debug;D:\a\mlc-llm\mlc-llm\build\tokenizers\Debug;D:\a\mlc-llm\mlc-llm\build\Debug;"
        ci/models_build/marian.bat "${{ github.event.inputs.quantization }}" "${{ github.event.inputs.language_pair }}"
    
    - name: Upload compied model as artifact
      uses: actions/upload-artifact@v3
      with:
          name: output-${{ github.event.inputs.quantization }}-opus-mt-${{ github.event.inputs.language_pair }}
          path: output-${{ github.event.inputs.quantization }}-opus-mt-${{ github.event.inputs.language_pair }}/
            

