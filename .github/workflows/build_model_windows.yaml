# GH actions.
# We use it to cover windows builds
# Jenkins is still the primary CI
name: build windows models

on:
  workflow_dispatch:
    inputs:
      quantization:
        description: "Choose quantization for model"
        required: true
        default: "q0f32"
        type: choice
        options:
          - q0f32
          - q4f32_1
      language_pair:
        description: "language pair"
        required: true
        default: "en-it"
        type: string

jobs:
  Build-Marian-Windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: 'cmd /C call {0}'

    steps:
    - name: Git config
      run: >-
        git config --system core.longpaths true
    - uses: actions/checkout@v3
      with:
        submodules: 'recursive'
    - name: Install LLVM
      run: >-
        cmd /C call ci\models_build\install_llvm.bat
    - uses: conda-incubator/setup-miniconda@v2
      with:
        activate-environment: mlc-llm-build
        channel-priority: strict
        environment-file: ci/build-environment.yaml
        auto-activate-base: false
    - name: Conda info
      run: |
        conda info
        conda list
        conda install zlib
        python --version
    - name: Install Visual Studio Build Tools 2022
      run: |
          choco install visualstudio2022buildtools --version=17.11.9
          refreshenv
    - name: build tvm
      run: |
        set "PATH=%PATH%;D:\a\msys64\mingw64\bin;D:\a\msys64\mingw64\include;D:\a\msys64\mingw64"
        set ZLIB_LIBRARY=D:\a\msys64\mingw64\bin\zlib1.dll
        cd ..
        git clone --recursive https://github.com/apache/tvm tvm
        cd tvm
        git reset --hard d5b9f5c30bc3e1f5e1a283ed19c5440afcc45889
        mkdir build
        cd build
        cp ../cmake/config.cmake .
        echo set(CMAKE_CXX_FLAGS "/bigobj") >> config.cmake
        echo set(CMAKE_EXE_LINKER_FLAGS "/LARGEADDRESSAWARE") >>  config.cmake
        echo set(CMAKE_SHARED_LINKER_FLAGS "/LARGEADDRESSAWARE") >> config.cmake
        #echo set(CMAKE_STATIC_LINKER_FLAGS "/LARGEADDRESSAWARE") >> config.cmake  # Add this line
        echo set(CMAKE_BUILD_TYPE Release) >> config.cmake
        echo set(USE_LLVM "llvm-config --ignore-libllvm") >> config.cmake
        echo set(HIDE_PRIVATE_SYMBOLS ON) >> config.cmake
        echo set(USE_VULKAN ON) >> config.cmake
        cmake .. -DCMAKE_CXX_FLAGS="/bigobj" -DCMAKE_EXE_LINKER_FLAGS="/LARGEADDRESSAWARE" -DCMAKE_SHARED_LINKER_FLAGS="/LARGEADDRESSAWARE" -DCMAKE_STATIC_LINKER_FLAGS="/LARGEADDRESSAWARE"
        cmake -G "Visual Studio 17 2022" -A x64 .
        cmake --build . --parallel 3 --verbose --config Release
        # Diagnostic commands
        echo "Listing all object files and their sizes:"
        dir /s *.obj | sort
        
        echo "Checking LLVM configuration:"
        llvm-config --components
        llvm-config --libs
        llvm-config --system-libs
        llvm-config --cxxflags

    #     cd ..
    #     cd python
    #     pip install -e .
    # - name: Build MLC-LLM
    #   run: |
    #     mkdir build
    #     cd build 
    #     echo set(USE_VULKAN ON) >>config.cmake
    #     echo set(TVM_SOURCE_DIR, $GITHUB_WORKSPACE/../tvm) >> config.cmake
    #     type config.cmake
    #     cmake ..
    #     cmake --build . --parallel 3 

    # - name: install mlc-llm
    #   run: |
    #     cd python
    #     pip install -e .
    # - name: download the model
    #   run: |
    #     git clone https://huggingface.co/Helsinki-NLP/opus-mt-en-it
    # - name: compile model
    #   run: >-
    #     ci/models_build/marian.bat

